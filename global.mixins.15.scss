/*
	global mixins
    NB: named global-mixins.15.scss to allow for project-specific overrides to these mixins (see UI/Source/GeneralStyle/mixins.20.scss)
*/

@mixin font_size($px) {
    font-size: px_to_rem($px);
}

@mixin line_height($px) {
    line-height: px_to_rem($px);
}

@mixin letter_spacing($px) {
    letter-spacing: px_to_rem($px);
}

@mixin border_radius($px) {
    border-radius: px_to_rem($px);
}

@mixin border_radius($topleft_px: 0, $topright_px: $topleft_px, $bottomright_px: $topleft_px, $bottomleft_px: $topleft_px) {
    $topleft_em: px_to_rem($topleft_px);
    $topright_em: px_to_rem($topright_px);
    $bottomright_em: px_to_rem($bottomright_px);
    $bottomleft_em: px_to_rem($bottomleft_px);
    border-radius: $topleft_em $topright_em $bottomright_em $bottomleft_em;
}

@mixin padding($top_px: 0, $right_px: 0, $bottom_px: $top_px, $left_px: $right_px) {
    $top_em: px_to_rem($top_px);
    $right_em: px_to_rem($right_px);
    $bottom_em: px_to_rem($bottom_px);
    $left_em: px_to_rem($left_px);
    padding: $top_em $right_em $bottom_em $left_em;
}

@mixin margin($top_px: 0, $right_px: 0, $bottom_px: $top_px, $left_px: $right_px) {
    $top_em: px_to_rem($top_px);
    $right_em: px_to_rem($right_px);
    $bottom_em: px_to_rem($bottom_px);
    $left_em: px_to_rem($left_px);
    margin: $top_em $right_em $bottom_em $left_em;
}

// typically used in the following context:
// <div className="wrapper">
//    <i className="fr fr-star"></i>
//    <span>Label text</span>
// </div>
// where .wrapper is a display: flex; align-items: center
// apply this to the icon (covers various FontAwesome / FourRoads classes) to size / space appropriately
@mixin icon_style($font_size: 1em, $margin_right: .5em) {
    .fa, .fas, .far, .fal, .fad, .fab, .fr {
        font-size: $font_size;
        margin-right: $margin_right;
    }
}

// used with <ul> elements to remove default bullet styling / padding
@mixin basic_list {
    list-style: none;
    padding-left: 0;
}

@mixin focus_styling {
    // mimics Chrome black outline
    // (box shadow used to apply white outer border for elements on a dark background)
    //transition: outline 1ms, box-shadow 1ms;
    //outline: 2px solid #000;
    //box-shadow: 0 0 0 3px #fff;

    // alternate version
    outline: 1px dotted #000;
    outline: -webkit-focus-ring-color auto 5px;
}

@mixin button_styling($text_align: center) {
    background: none;
    text-align: $text_align;
    vertical-align: middle;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    line-height: normal;
    transition: all .2s ease-in-out;
    transition-property: color, background-color, border-color;
    border: 0;
    @include padding(1, 6);

    &:focus {
        // TODO: looks terrible
        //@include focus_styling;
    }
}

@mixin link_styling($hasIcon: true, $font_size: 1.25em) {
    color: $theme_link_fg;
    font-weight: $theme_link_weight;
    text-decoration: none;

    &:focus {
        @include focus_styling;
    }
    // ensure underlining doesn't apply to icons
    @if $hasIcon {
        @include icon_style($font_size, .25em);
        display: inline-flex;
        align-items: center;

        &:hover {
            color: $theme_link_hover_fg;

            > span:not(.header-link) {
                text-decoration: $theme_link_hover_decoration;

                .header-link-label {
                    text-decoration: $theme_link_hover_decoration;
                }
            }
        }
    }
    @else {

        &:hover {
            color: $theme_link_hover_fg;
            text-decoration: $theme_link_hover_decoration;
        }
    }

    &:active {
        color: $theme_link_active_fg;
    }
}

$input-btn-focus-width:       .2rem !default;
$btn-focus-width:             $input-btn-focus-width !default;

@mixin button-variant($foreground, $background, $border: $background, 
    $hover-background: darken($background, 7.5%), 
    $hover-border: darken($border, 10%), 
    $active-background: darken($background, 10%), 
    $active-border: darken($border, 12.5%)) {

      @if ($foreground) {
        color: $foreground;
      } @else {
        color: color-yiq($background);
      }

  background-color: $background;
  border-color: $border;

  &:hover {

      @if ($foreground) {
        color: $foreground;
      } @else {
        color: color-yiq($hover-background);
      }

    background-color: $hover-background;
    border-color: $hover-border;
  }

  &:focus,
  &.focus {

      @if ($foreground) {
        color: $foreground;
      } @else {
        color: color-yiq($hover-background);
      }

    background-color: $hover-background;
    border-color: $hover-border;
    box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {

      @if ($foreground) {
        color: $foreground;
      } @else {
        color: color-yiq($background);
      }

    background-color: $background;
    border-color: $border;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {

      @if ($foreground) {
        color: $foreground;
      } @else {
        color: color-yiq($active-background);
      }

    background-color: $active-background;
    border-color: $active-border;

    &:focus {
      box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
    }
  }
}

@mixin button-outline-variant($foreground: $background, $background, $color-hover: color-yiq($background), $active-background: $background, $active-border: $background) {

  @if ($foreground) {
      color: $foreground;
  } @else {
      color: $background;
  }

  border-color: $background;

  &:hover {

    @if ($foreground) {
      color: $foreground;
    } @else {
      color: $color-hover;
    }

    background-color: $active-background;
    border-color: $active-border;
  }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 $btn-focus-width rgba($background, .5);
  }

  &.disabled,
  &:disabled {

    @if ($foreground) {
      color: $foreground;
    } @else {
      color: $background;
    }

    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {

    @if ($foreground) {
      color: $foreground;
    } @else {
      color: color-yiq($active-background);
    }

    background-color: $active-background;
    border-color: $active-border;

    &:focus {
      box-shadow: 0 0 0 $btn-focus-width rgba($background, .5);
    }
  }
}

@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
  padding: $padding-y $padding-x;
  //@include font-size($font-size);
  font-size: $font-size;
  line-height: $line-height;
  // Manually declare to provide an override to the browser default
  //@include border-radius($border-radius, 0);
  border-radius: $border-radius;
}

// Set a specific jump point for requesting color jumps
$theme-color-interval:      8% !default;

@function theme-color-level($color-name: "primary", $level: 0) {
  //$color: theme-color($color-name);
  $color: get_palette(color, $color-name);
  $color-base: if($level > 0, #000, #fff);
  $level: abs($level);

  @return mix($color-base, $color, $level * $theme-color-interval);
}

$badge-focus-width:                 $input-btn-focus-width !default;

@mixin badge-variant($bg) {
  color: color-yiq($bg);
  background-color: $bg;

  @at-root a#{&} {

    &:hover,
    &:focus {
      color: color-yiq($bg);
      background-color: darken($bg, 10%);
    }

    &:focus,
    &.focus {
      outline: 0;
      box-shadow: 0 0 0 $badge-focus-width rgba($bg, .5);
    }
  }
}

@mixin alert-variant($background, $border, $color) {
  color: $color;
  background-color: $background;
  border-color: $border;

  hr {
    border-top-color: darken($border, 5%);
  }

  .alert-link {
    color: darken($color, 10%);
  }
}

$grid_breakpoints: get_theme(grid-breakpoints, bootstrap);

@function breakpoint-next($name, $breakpoints: $grid_breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

@function breakpoint-min($name, $breakpoints: $grid_breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid_breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);
}

@function breakpoint-infix($name, $breakpoints: $grid_breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@mixin media-breakpoint-up($name, $breakpoints: $grid_breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid_breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid_breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

@mixin media-breakpoint-only($name, $breakpoints: $grid_breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}


@mixin base_button_styling() {
    @include button_styling; // NB: includes focus styling
    display: inline-block;
    font-weight: 400;
    color: #212529;
    text-align: center;
    vertical-align: middle;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    background-color: transparent;
    border: 1px solid transparent;
    padding: .375rem .75rem;
    font-size: 1rem;
    line-height: 1.5;
    border-radius: .25rem;
    transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;
    text-decoration: none;
    cursor: pointer;

    &[disabled] {
        opacity: .5;
        cursor: not-allowed;
    }

    &:hover {
        text-decoration: none;
    }
}

@mixin primary_button_styling() {
    background-color: $theme_primary_btn_bg;
    color: $theme_primary_btn_fg;
    border: $theme_primary_btn_border;
    border-radius: $theme_primary_btn_border_radius;
    font-size: $theme_primary_btn_font_size;
    font-weight: $theme_primary_btn_font_weight;
    padding: $theme_primary_btn_padding;
    
    &:hover {
        background-color: $theme_primary_btn_hover_bg;
        color: $theme_primary_btn_hover_fg;
        border: $theme_primary_btn_hover_border;
    }

    &:active {
        background-color: $theme_primary_btn_active_bg;
        color: $theme_primary_btn_active_fg;
        border: $theme_primary_btn_active_border;
    }

    &:focus {
        outline: 0;
        box-shadow: 0 0 0 0.2rem rgba($theme_primary_btn_bg, .5);
    }
}

@mixin secondary_button_styling() {
    background-color: $theme_secondary_btn_bg;
    color: $theme_secondary_btn_fg;
    border: $theme_secondary_btn_border;
    border-radius: $theme_secondary_btn_border_radius;
    font-size: $theme_secondary_btn_font_size;
    font-weight: $theme_secondary_btn_font_weight;
    padding: $theme_secondary_btn_padding;

    &:hover {
        background-color: $theme_secondary_btn_hover_bg;
        color: $theme_secondary_btn_hover_fg;
        border: $theme_secondary_btn_hover_border;
    }

    &:active {
        background-color: $theme_secondary_btn_active_bg;
        color: $theme_secondary_btn_active_fg;
        border: $theme_secondary_btn_active_border;
    }

    &:focus {
        outline: 0;
        box-shadow: 0 0 0 0.2rem rgba($theme_secondary_btn_bg, .5);
    }
}



// breakpoints used by data-clamp-xs / -sm / -md / -lg / -xl variants
$data_clamp_breakpoints: (
  "xs": 575px,
  "sm": 576px,
  "md": 768px,
  "lg": 992px,
  "xl": 1200px
);

// max value supported by [data-clamp]
$data_clamp_max: 6;

// enforces single line clamping
@mixin singleLineClamping(){
    white-space: nowrap;
    display: block;
}

// enforces multiple line clamping
@mixin multipleLineClamping($attribute, $maxLines){

  [#{$attribute}="#{$maxLines}"] 
  {
    line-clamp: $maxLines;
    -webkit-line-clamp: $maxLines;
  }
}

// restores line wrapping (used when overriding line clamping at various breakpoints)
@mixin restoreLineWrapping(){
    display: block;
    -webkit-box-orient: inline-axis;
    text-overflow: clip;
    overflow: visible;
	white-space: normal;
	
	&[data-clamp-display="inline-block"] {
		display: inline-block;		
	}

	&[data-clamp-display="inline-flex"] {
		display: inline-flex;		
	}

	&[data-clamp-display="flex"] {
		display: flex;		
	}
}

// initial (xs) breakpoint uses a max-width @media query
// (everything else uses min-width)
@function getBreakpointType($breakpoint) {
  @if ($breakpoint == 'xs') {
    @return max-width;
  }
  
  @return min-width;
}

// define line clamping for a specific breakpoint
@mixin lineClampingBreakpoint($breakpoint, $width) {
  $breakpoint_type: getBreakpointType($breakpoint);

  @media only screen and (#{$breakpoint_type}: $width) {
  
  	[data-clamp-#{$breakpoint}="0"] {
  		@include restoreLineWrapping();
  	}

  	[data-clamp-#{$breakpoint}="1"] {
  		@include singleLineClamping();
  	}
  
  	@for $i from 2 through $data_clamp_max {
  	  @include multipleLineClamping("data-clamp-#{$breakpoint}", $i);
  	}
  }
}
