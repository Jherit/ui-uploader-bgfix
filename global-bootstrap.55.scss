/*
	global bootstrap override styles
    NB: button-specific overrides are defined within global-buttons.35.scss
*/

// override alerts
.alert {
    padding: get_value(padding, bootstrap, alert);
    border-width: get_value(border-width, bootstrap, alert);
    border-radius: get_value(border-radius, bootstrap, alert);

    @include get_alert_themes();
}

// override badges
.badge {
    outline: 0 !important;
    padding: get_value(padding, bootstrap, badge);
    font-size: get_value(font-size, bootstrap, badge);
    font-weight: get_value(font-weight, bootstrap, badge);
    border-radius: get_value(border-radius, bootstrap, badge);

    @include get_badge_themes();
}

// overrides for bootstrap modal defaults
.modal-backdrop {
    background-color: $theme_modal_backdrop;

    &.show {
        opacity: $theme_modal_backdrop_opacity;
    }
}

.modal {
    // fix for line-height: 0 being inherited from card footers
    line-height: normal;

    .modal-dialog {
        //width: 616px;
        //max-width: 100vw;
        .modal-content {
            background-color: $theme_modal_bg;
            color: $theme_modal_fg;
            border: $theme_modal_border;
            @include border_radius($theme_modal_border_radius);
            box-shadow: $theme_modal_box_shadow;

            .modal-header {
                height: $theme_modal_header_height;
                border-bottom-width: get_value(border-bottom-width, bootstrap, modal, header);

                .modal-title {
                    //display: none;
                }

                .close {
                    width: $theme_modal_header_height;
                    height: $theme_modal_header_height;
                    background-color: $theme_modal_close_bg;
                    opacity: 1;
                    color: $theme_modal_close_fg;

                    > span {
                        // hide Bootstrap close "x" text ...
                        display: none;
                    }
                    // ... and replace with icon
                    &::after {
                        content: "\f00d"; // fr-times
                        font-family: "Font Awesome 5 Pro";
                        font-weight: 300; // equivalent to .fal
                        -moz-osx-font-smoothing: grayscale;
                        -webkit-font-smoothing: antialiased;
                        display: inline-block;
                        font-style: normal;
                        font-variant: normal;
                        text-rendering: auto;
                        line-height: 1;
                        @include font_size($theme_modal_close_font_size);
                    }
                }
            }

            .modal-body {
                // used to render footer controls within .modal-body
                // (as opposed to the more typical .modal-footer - sometimes unavoidable)
                .modal-internal-footer {
                    text-align: right;

                    > button, > a {
                        margin-top: 1rem;
                        margin-right: 1rem;

                        &:last-child {
                            margin-right: 0;
                        }
                    }
                }
            }

            // hide empty footers
            .modal-footer:empty {
                display: none;
            }
        }
    }

    &.no-header {

        .modal-dialog {

            .modal-content {

                .modal-header {
                    display: none;
                }

                .modal-body {
                    padding-top: 3rem;
                }

            }

        }

    }

    &.no-title:not(.no-header) {

        .modal-dialog {

            .modal-content {

                .modal-header {
                    border: 0;

                    .modal-title {
                        display: none;
                    }

                    .close {
                        z-index: 1;
                    }
                }

                .modal-body {
                    margin-top: -$theme_modal_header_height;
                    // NB: note titles defined within modal body will need to be wary of being partially obscured by the close button without the following line
                    // (commented as this has the side effect of making content too narrow / bringing footer contrls too far left)
                    //padding-right: calc(1rem + #{$theme_modal_header_height});

                    .modal-internal-footer {
                        //margin-right: -$theme_modal_header_height;
                    }
                }
            }
        }
    }

    &.no-footer {

        .modal-dialog {

            .modal-content {

                .modal-footer {
                    display: none;
                }
            }
        }
    }
}

// overrride pagination
$pagination_spacing: get_value(linkSpacing, bootstrap, pagination);
$pagination_border_width: get_value(border-width, bootstrap, pagination);
$pagination_min_size: get_value(minSize, bootstrap, pagination);

.pagination {
    justify-content: get_value(justify-content, bootstrap, pagination);
    margin-bottom: .5rem;

    &[data-spacing] {

    }

    .page-item {

        &:first-child .page-link {
            margin-left: 0 !important;
        }
        
        &:last-child .page-link {
            margin-right: 0 !important;
        }

        .page-link {
            padding: get_value(padding, bootstrap, pagination);
            background-color: get_value(background-color, bootstrap, pagination);
            color: get_value(color, bootstrap, pagination);
            border-color: get_value(border-color, bootstrap, pagination);
			border-radius: 0 !important;
            border-width: $pagination_border_width;

            @if ($pagination_min_size) {
                display: flex;
                align-items: center;
                justify-content: center;
                min-width: $pagination_min_size;
                min-height: $pagination_min_size;
            }

            @if ($pagination_spacing) {
                margin-left: calc(#{$pagination_spacing} / 2);
                margin-right: calc(#{$pagination_spacing} / 2);
            } @else {
                margin-left: -$pagination_border_width;
            }

            &[disabled] {
                background-color: get_value(background-color, bootstrap, pagination, disabled) !important;
                color: get_value(color, bootstrap, pagination, disabled) !important;
                border-color: get_value(border-color, bootstrap, pagination, disabled) !important;
            }

            &.empty {
                visibility: hidden;
            }
        }

        .first-page {

        }

        .prev-page {

        }

        .next-page {

        }

        .last-page {

        }

        &.active {

            .page-link {
                background-color: get_value(background-color, bootstrap, pagination, active);
                color: get_value(color, bootstrap, pagination, active);
                border-color: get_value(border-color, bootstrap, pagination, active);
            }
        }
    }
}

// override spinners
.spinner-border {
    width: get_value(width, bootstrap, spinners);
    height: get_value(height, bootstrap, spinners);
    border-width: get_value(border-width, bootstrap, spinners);
    border-color: get_value(border-color, bootstrap, spinners);
    border-right-color: get_value(border-right-color, bootstrap, spinners);
    animation-duration: get_value(animation-duration, bootstrap, spinners);

    // TODO: other spinner variants
    // ref: https://getbootstrap.com/docs/4.3/components/spinners/
}
