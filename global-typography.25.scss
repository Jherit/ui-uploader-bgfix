/*
	global typography styles
    NB: named global-typography.25.scss to allow for project-specific overrides to these styles (see UI/Source/GeneralStyle/typography.30.scss)
*/

html {
    // use percentage value to account for user-defined base font size (typically 16px, but could be anywhere between 9-24px)
    //font-size: #{$base_font_size}px;
    font-size: #{($base_font_size / 16) * 100} + "%";
    
    // define rules which shouldn't be applied for admin views
    //&:not(.admin),
    //&.admin.fullscreen-preview {

        h1, h2, h3, h4, h5, h6,
        .h1, .h2, .h3, .h4, .h5, .h6 {
            font-family: $title_font_family;
            font-weight: $title_font_weight;
        }

        h1, .h1 {
            font-size: $theme_h1_font_size;
        }

        h2, .h2 {
            font-size: $theme_h2_font_size;
        }

        h3, .h3 {
            font-size: $theme_h3_font_size;
        }

        h4, .h4 {
            font-size: $theme_h4_font_size;
        }

        h5, .h5 {
            font-size: $theme_h5_font_size;
        }

        h6, .h6 {
            font-size: $theme_h6_font_size;
        }

        b, strong {
            font-family: $bold_font_family;
            font-weight: $bold_font_weight;
        }
    //}
}

@function get_line_height($font_size) {
    $lookup_table: (
        48: 1.25,   // 60
        36: 1.277,  // 46
        30: 1.333,  // 40
        24: 1.333,  // 32
        20: 1.4,    // 28
        16: 1.5,    // 24
        14: 1.464,  // 20.5
        12: 1.428,  // 20
        10: 1.35    // 13.5
    );
    
    $multiple: map-get($lookup_table, $font_size);

    @if not ($multiple) {
        $closestDiff: 1000;

        @each $key, $value in $lookup_table {
            $diff: 0;
            
            @if ($key > $font_size) {
                $diff: $key - $font_size;
            } @else {
                $diff: $font_size - $key;
            }
            
            @if ($diff < $closestDiff) {
                $closestDiff: $diff;
                $multiple: $value;
            }

        }

    }

    @return ($font_size * $multiple) + 0px;
}

// scale given property between given sizes / breakpoints
// example usage:
// @include ss_scale(font-size, (600: 16, 768: 22, 1024: 30, 1280: 75));
//
// sets font-size as follows:
// <= 600px: 16px
// > 600px <= 768px: scale smoothly between 16px > 22px
// > 768px <= 1024px: scale smoothly between 22px > 30px
// > 1024px <= 1280px: scale smoothly between 30p > 75px
// > 1280px: 75px
//
// ideally we could use min() / max() or even clamp(), but IE .... o.O

// TODO: consider supporting em / rem units (to optionally account for different base font size set in user's browser)
// use $line_height to define preferred line height for this item when scaling
@mixin ss_scale($property, $values, $line_height: 1.4) {
    $previousBreakpoint: null;
    $previousValue: null;
    $shorthandMap: (
        'ipad': 1024,
        'ipad-landscape': 1024,
        'ipad-mini': 1024,
        'ipad-mini-landscape': 1024,
        'xga': 1024,
        'ipad-portrait': 768,
        'ipad-mini-portrait': 768,

        // NB: iPad pro to test - x1.5?
        'ipad-pro': 1366,
        'ipad-pro-landscape': 1366,
        'ipad-pro-12-9-landscape': 1366,
        'ipad-pro-11': 1194,
        'ipad-pro-11-landscape': 1194,
        'ipad-pro-10-5': 1112,
        'ipad-pro-10-5-landscape': 1112,
        'ipad-pro-10-2': 1080,
        'ipad-pro-10-2-landscape': 1080,
        'ipad-pro-11-portrait': 834,
        'ipad-pro-10-5-portrait': 834,
        'ipad-pro-10-2-portrait': 810,
        'laptop': 1366,                 // 1366x768
        'wxga': 1366,                   // 1366x768
        'sxga': 1280,                   // 1280x1024
        'macbook': 2304,                // 2304x1440 x2
        'macbook-pro-13-3': 2560 / 2,   // 2560x1600 x2
        'macbook-pro-15': 2880 / 2,     // 2880x1800 x2
        'macbook-pro-16': 3072 / 2,     // 3072x1920 x2
        'imac-21-5': 4096 / 2,          // 4096x2394 x2
        'imac-27': 5120 / 2             // 5120x2880 x2
    );
    $breakpointList: ();

    // iterate through list and update shorthand breakpoint terms
    @each $breakpoint, $value in $values {
        $resolved: map-get($shorthandMap, $breakpoint);

        @if ($resolved) {
            $breakpoint: $resolved;
        }

        $breakpointList: map-merge($breakpointList, ($breakpoint: $value));
    }

    // ensure list is in breakpoint order    
    $breakpointList: map-sort-keys($breakpointList);

    // now loop through and generate font locks for each breakpoint
    @each $breakpoint, $value in $breakpointList {
        $index: index(($values), ($breakpoint $value)) - 1;
        
        @if ($index == 0) {
            // set initial property
            #{$property}: $value + 0px;

            // if we're scaling font-size, update line-height appropriately
            @if ($property == 'font-size') {
                line-height: get_line_height($value);
            }

        } @else {
            $minWidth: $previousBreakpoint + 1;
            $valueDiff: $value - $previousValue;
            $breakpointDiff: $breakpoint - $previousBreakpoint;
              
            // set scaled value
            @media only screen and (min-width: $minWidth + 0px) {
                #{$property}: calc(#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff}));

                // if we're scaling font-size, update line-height appropriately
                @if ($property == 'font-size') {
                    line-height: $line_height;
                    $slope: (1.06 - 1.5) / (240 - 16); // 1.06 @ 240px / 1.5 @ 16px
                    $initial: 1.5 - $slope * 16;
                    /*
                    //line-height: calc(#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff}) * 1.06);
                    //line-height: calc((#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff}) * #{$slope}) + #{$initial + 0px});
                    //line-height: calc((#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff})) * 1.616);

                    line-height: clamp(
                        calc((#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff})) * 1.06), 
                        calc(((#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff})) * #{$slope}) + #{$initial + 0px}),
                        calc((#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff})) * 1.616));
                    */
                }

            }
              
            @if ($index + 1 == length($values)) {
                  
                // set a maximum size at the last breakpoint
                @media only screen and (min-width: $breakpoint + 0px) {
                    #{$property}: $value + 0px;

                    // if we're scaling font-size, update line-height appropriately
                    @if ($property == 'font-size') {
                        line-height: get_line_height($value);
                    }

                }
                  
            }

        }
          
        $previousBreakpoint: $breakpoint;
        $previousValue: $value;
    }
  
}
