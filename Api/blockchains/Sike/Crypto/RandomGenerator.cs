using Org.BouncyCastle.Security;

namespace Lumity.SikeIsogeny;

/**
 * Random generator for key material.
 *
 * @author Roman Strobl, roman.strobl@wultra.com
 */
public class RandomGenerator {

    private SecureRandom secureRandom;

    /**
     * Default random generator constructor.
     */
    public RandomGenerator() {
		secureRandom = new SecureRandom();
    }

    /**
     * Random generator constructor with provided SecureRandom.
     * @param secureRandom SecureRandom implementation to use.
     */
    public RandomGenerator(SecureRandom secureRandom) {
        this.secureRandom = secureRandom;
    }

    /**
     * Generate random bytes.
     * @param length Length of generated byte array.
     * @return Byte array with random bytes.
     * @throws NoSuchProviderException Thrown in case Bouncy Castle provider is not available.
     * @throws NoSuchAlgorithmException Thrown in case random generator algorithm is not available.
     */
    public byte[] GenerateRandomBytes(int length) {
        
        byte[] randomBytes = new byte[length];
        secureRandom.NextBytes(randomBytes);
        return randomBytes;
    }

}
