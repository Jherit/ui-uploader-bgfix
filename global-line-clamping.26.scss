/*
 * cross-browser line clamping support
 *
 * example usage:
 *
 * <p data-clamp="3">Content will be limited to 3 lines</p>
 *
 * <p data-clamp="2" data-clamp-md="3" data-clamp-xl="0">
 *   This content will be limited to 2 lines, up until the screen width reaches $data_clamp_breakpoints['md'],
 *   whereupon content will be limited to 3 lines.  Once $data_clamp_breakpoints['xl'] is reached, line clamping
 *   will be disabled (display reset to block by default)
 * </p>
 *
 * <p data-clamp-sm="4" data-clamp-lg="0" data-clamp-display="flex">
 *   This content will be not be limited below $data_clamp_breakpoints['sm']; after this, it will be limited to 4 lines.
 *   Once $data_clamp_breakpoints['xl'] is reached, line clamping will be disabled and display will be reset to "flex"
 * </p>
 */

// breakpoints used by data-clamp-xs / -sm / -md / -lg / -xl variants
$data_clamp_breakpoints: (
  "xs": 575px,
  "sm": 576px,
  "md": 768px,
  "lg": 992px,
  "xl": 1200px
);

// max value supported by [data-clamp]
$data_clamp_max: 6;

// enforces single line clamping
@mixin singleLineClamping(){
    white-space: nowrap;
    /*
    text-overflow: ellipsis;
    overflow: hidden;
    max-width: 100%;
    display: block;

	&[data-clamp-display="inline-block"] {
		display: inline-block;		
	}

	&[data-clamp-display="inline-flex"] {
		display: inline-flex;		
	}

	&[data-clamp-display="flex"] {
		display: flex;		
	}
    */

}

// enforces multiple line clamping
@mixin multipleLineClamping($attribute, $maxLines){

  [#{$attribute}="#{$maxLines}"] 
  {
    line-clamp: $maxLines;
    -webkit-line-clamp: $maxLines;
  }
}

// restores line wrapping (used when overriding line clamping at various breakpoints)
@mixin restoreLineWrapping(){
    display: block;
    -webkit-box-orient: inline-axis;
    text-overflow: clip;
    overflow: visible;
	white-space: normal;
	
	&[data-clamp-display="inline-block"] {
		display: inline-block;		
	}

	&[data-clamp-display="inline-flex"] {
		display: inline-flex;		
	}

	&[data-clamp-display="flex"] {
		display: flex;		
	}
}

// initial (xs) breakpoint uses a max-width @media query
// (everything else uses min-width)
@function getBreakpointType($breakpoint) {
  @if ($breakpoint == 'xs') {
    @return max-width;
  }
  
  @return min-width;
}

// define line clamping for a specific breakpoint
@mixin lineClampingBreakpoint($breakpoint, $width) {
  $breakpoint_type: getBreakpointType($breakpoint);

  @media only screen and (#{$breakpoint_type}: $width) {
  
  	[data-clamp-#{$breakpoint}="0"] {
  		@include restoreLineWrapping();
  	}

  	[data-clamp-#{$breakpoint}="1"] {
  		@include singleLineClamping();
  	}
  
  	@for $i from 2 through $data_clamp_max {
  	  @include multipleLineClamping("data-clamp-#{$breakpoint}", $i);
  	}
  }
}

// add [data-clamp] attribute with the required number of lines to limit content to
//[data-clamp]:not([data-clamp="1"]),
[data-clamp],
[data-clamp-xs],
[data-clamp-sm],
[data-clamp-md],
[data-clamp-lg],
[data-clamp-xl] {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    text-overflow: ellipsis;
    overflow: hidden;
}

// limit text to a single line
[data-clamp="1"] {
  @include singleLineClamping();
}

// produce line-clamping variants
@for $i from 2 through $data_clamp_max {
  @include multipleLineClamping("data-clamp", $i);
}

// breakpoint-specific variants
@each $breakpoint, $width in $data_clamp_breakpoints {
  @include lineClampingBreakpoint($breakpoint, $width);
}
